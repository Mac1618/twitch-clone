// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// User Model
model User {
  id String @id @default(uuid())                // Unique identifier for each user
  username String @unique                       // Unique username for each user
  imageUrl String @db.Text                      // URL of the user's profile image
  externalUserId String @unique                 // Clerk user's id
  bio String? @db.Text                          // Optional biography of the user

  // Follow Model Relationship with User Model
  following Follow[] @relation("Following")    // List of users that the user is following
  followedBy Follow[] @relation("FollowedBy")  // List of users that are following the user

  // Block Model Relationship with User Model          
  blocking Block[] @relation("Blocking")       // List of users that blocked the user
  blockedBy Block[] @relation("BlockedBy")     // List of users that the user is blocking

  // Stream Model Relationship with User Model 
  stream Stream?

  // Date created and updated
  createdAt DateTime @default(now())        // Date and time when the user was created
  updatedAt DateTime @updatedAt             // Date and time when the user was last updated
}


// Follow Model
model Follow {
  id String @id @default(uuid())          // Unique identifier for each follow relationship
  followerId String                       // Identifier of the follower user
  followingId String                      // Identifier of the user being followed

  // Relationship with users
  follower User @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)                      // User who is following
  following User @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)                      // User who is being followed

  // Date and time when the follow relationship was created
  createdAt DateTime @default(now())      // Date and time when the follow relationship was created
  updatedAt DateTime @updatedAt           // Date and time when the follow relationship was last updated

  // Ensure each follow relationship is unique and create indexes for faster querying
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}


// Block Model
model Block {
  id String @id @default(uuid())
  blockerId String 
  blockedId String

  // Relationship
  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

// Stream Model
model Stream {
  id String @id @default(uuid())
  name String @db.Text
  thunailUrl String? @db.Text

  // Use for connecting streaming software
  ingressId String? @unique
  serverUrl String? @db.Text
  streamKey String? @db.Text

  // Stream options defaults (enable chat, disable chat, etc.)
  isLive Boolean @default(false)
  isChatEnabled Boolean @default(true)
  isChatDelayed Boolean @default(false)
  isChatFowollersOnly Boolean @default(false)

  // Connection to the user that owns the stream
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Date created and updated
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([ingressId])
  // @@fulltext([name])
}
